{"version":3,"sources":["components/add_book_button.jsx","components/sidebar_links.jsx","components/sidebar.jsx","components/top_title.jsx","components/filters_books.jsx","App.js","serviceWorker.js","index.js"],"names":["AddBookButton","state","react_default","a","createElement","className","Component","SidebarLinks","href","Sidebar","add_book_button","sidebar_links","TopTitle","FiltersBooks","type","name","id","value","defaultChecked","App","sidebar","top_title","filters_books","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAYeA,6MAVbC,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAlB,sBALoBC,aCyBbC,6MAxBbN,MAAQ,2EAEN,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,QAAR,gBAEFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,OAAOH,UAAU,UAAzB,WAEFH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,QAAR,cAEFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,QAAR,oBAEFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,QAAR,qBAlBeF,aCcZG,6MAXbR,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAACM,EAAD,MACAR,EAAAC,EAAAC,cAACO,EAAD,cANcL,aCSPM,6MAVbX,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,aACjBH,EAAAC,EAAAC,cAAA,4CALeE,aC0BRO,6MAzBbZ,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACjBH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,SAAOU,KAAK,QAAQC,KAAK,gBAAgBC,GAAG,GAAGC,MAAM,gBAAgBC,gBAAc,IACnFhB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,cAEFH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,SAAOU,KAAK,QAAQC,KAAK,gBAAgBC,GAAG,GAAGC,MAAM,kBACrDf,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,gBAEFH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,SAAOU,KAAK,QAAQC,KAAK,gBAAgBC,GAAG,GAAGC,MAAM,kBACrDf,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,iBAEFH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,SAAOU,KAAK,QAAQC,KAAK,gBAAgBC,GAAG,GAAGC,MAAM,kBACrDf,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,uBAnBiBC,aCiBZa,0LAVX,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAACkB,EAAD,cANUhB,cCMEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.62905be2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass AddBookButton extends Component {\r\n  state = {  }\r\n  render() { \r\n    return (\r\n      <div className=\"add_book_wrapper\">\r\n        <button className=\"add_book_btn\">ADD A BOOK</button>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default AddBookButton;","import React, { Component } from 'react';\r\nclass SidebarLinks extends Component {\r\n  state = {  }\r\n  render() { \r\n    return ( \r\n        <ul className=\"sidebar_links\">\r\n          <li>\r\n            <a href=\"#top\">Now Reading</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#top\" className=\"active\">Browse</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#top\">Buy Books</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#top\">Favourite Books</a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#top\">Wishlist</a>\r\n          </li>\r\n        </ul>\r\n     );\r\n  }\r\n}\r\n \r\nexport default SidebarLinks;","import React, { Component } from 'react';\r\nimport AddBookButton from \"./add_book_button\";\r\nimport SidebarLinks from \"./sidebar_links\";\r\nclass Sidebar extends Component {\r\n  state = {  }\r\n  render() { \r\n    return ( \r\n      <section className=\"sidebar\">\r\n        <AddBookButton/>\r\n        <SidebarLinks/>\r\n      </section>\r\n     );\r\n  }\r\n}\r\n \r\nexport default Sidebar;","import React, { Component } from 'react';\r\nclass TopTitle extends Component {\r\n  state = {  }\r\n  render() { \r\n    return ( \r\n      <section className=\"top_title\">\r\n        <h1>Browse Available Books</h1>\r\n      </section>\r\n     );\r\n  }\r\n}\r\n \r\nexport default TopTitle;","import React, { Component } from 'react';\r\nclass FiltersBooks extends Component {\r\n  state = {  }\r\n  render() { \r\n    return ( \r\n      <section className=\"filters_books\">\r\n        <label className=\"book_filter_btn\">\r\n          <input type=\"radio\" name=\"filter_radios\" id=\"\" value=\"fiter_radio_1\" defaultChecked/>\r\n          <span className=\"checker\">All Books</span>\r\n        </label>\r\n        <label className=\"book_filter_btn\">\r\n          <input type=\"radio\" name=\"filter_radios\" id=\"\" value=\"fiter_radio_2\"/>\r\n          <span className=\"checker\">Most Recent</span>\r\n        </label>\r\n        <label className=\"book_filter_btn\">\r\n          <input type=\"radio\" name=\"filter_radios\" id=\"\" value=\"fiter_radio_3\"/>\r\n          <span className=\"checker\">Most Popular</span>\r\n        </label>\r\n        <label className=\"book_filter_btn\">\r\n          <input type=\"radio\" name=\"filter_radios\" id=\"\" value=\"fiter_radio_4\"/>\r\n          <span className=\"checker\">Free Books</span>\r\n        </label>\r\n      </section>\r\n     );\r\n  }\r\n}\r\n \r\nexport default FiltersBooks;","import React, { Component } from 'react';\nimport Sidebar from \"./components/sidebar\";\nimport TopTitle from \"./components/top_title\";\nimport FiltersBooks from \"./components/filters_books\";\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Sidebar/>\n        <TopTitle/>\n        <FiltersBooks/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}